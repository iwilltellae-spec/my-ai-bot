import logging
import requests
import json
import re
import os
from collections import defaultdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler, ConversationHandler
)
from telegram.constants import ParseMode

# === –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è Render: –ø–æ—Ç–æ–∫ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä ===
import threading
from flask import Flask

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
ADMIN_ID = 7211675735
TELEGRAM_TOKEN = '8242776474:AAGN5Crcnu2O46GgjJs6cLbJWRIDG9cEJqc'
DEEPSEEK_API_KEY = 'io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6ImUxYmMyYjJhLWYxOTQtNDgxNi04NWM2LTNhMWUzMWRiODM5OSIsImV4cCI6NDkwODM1OTQyN30.A3bDGQ_uTwtZt-hCTkvFRKbN-7344vRtqwYF3VyHjkDdpfFAWaulYF4kt4O0P06N_LmFeGBcmgcsJvPpz0YSMQ'
DEEPSEEK_API_URL = "https://api.intelligence.io.solutions/api/v1/chat/completions"
DEEPSEEK_MODEL_NAME = "deepseek-ai/DeepSeek-R1-0528"
STYLES_FILE = 'styles.json'
ADMINS_FILE = 'admins.json'

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
STYLES = {}
CURRENT_STYLE_KEY = 'gopnik'
BOT_IS_ACTIVE = True
bot_stats = {"requests": 0, "errors": 0}
ADMINS = {}
chat_histories = defaultdict(list)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
GET_STYLE_NAME, GET_STYLE_PROMPT, GET_EDIT_PROMPT = range(3)
GET_ADMIN_FORWARD = range(3, 4)[0]

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

def md2(text):
    return escape_markdown(str(text))

def load_data():
    global STYLES, CURRENT_STYLE_KEY, ADMINS
    if os.path.exists(STYLES_FILE):
        with open(STYLES_FILE, 'r', encoding='utf-8') as f:
            STYLES = json.load(f)
    else:
        STYLES = {'gopnik': "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –≥–æ–ø–Ω–∏–∫ –∏ –Ω–∞ –ø–æ—Ö"}
        save_styles()
    if CURRENT_STYLE_KEY not in STYLES:
        CURRENT_STYLE_KEY = next(iter(STYLES)) if STYLES else None
    if os.path.exists(ADMINS_FILE):
        try:
            with open(ADMINS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            if isinstance(data, dict):
                ADMINS = {int(k): v for k, v in data.items()}
            else:
                ADMINS = {}
        except (json.JSONDecodeError, AttributeError):
            ADMINS = {}
    if ADMIN_ID not in ADMINS:
        ADMINS[ADMIN_ID] = f"user_{ADMIN_ID}"
        save_admins()

def save_styles():
    with open(STYLES_FILE, 'w', encoding='utf-8') as f:
        json.dump(STYLES, f, ensure_ascii=False, indent=4)

def save_admins():
    with open(ADMINS_FILE, 'w', encoding='utf-8') as f:
        json.dump(ADMINS, f, ensure_ascii=False, indent=4)

def get_model_response(prompt: str, system_prompt_override=None) -> str:
    global bot_stats
    bot_stats["requests"] += 1
    headers = {
        'Authorization': f'Bearer {DEEPSEEK_API_KEY}',
        'Content-Type': 'application/json'
    }
    system_prompt = system_prompt_override if system_prompt_override else STYLES.get(
        CURRENT_STYLE_KEY, "You are a helpful assistant."
    )
    payload = {
        "model": DEEPSEEK_MODEL_NAME,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ]
    }
    try:
        response = requests.post(DEEPSEEK_API_URL, headers=headers, data=json.dumps(payload), timeout=60)
        if response.status_code == 200:
            response_data = response.json()
            raw_content = response_data["choices"][0]["message"]["content"]
            return re.sub(r"<think>.*?</think>\s*", "", raw_content, flags=re.DOTALL).strip()
        else:
            bot_stats["errors"] += 1
            error_details = response.text
            logger.error(f"API Deepseek –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É {response.status_code}: {error_details}")
            return f"–°–ª—ã—à—å, —Å–µ—Ä–≤–∞–∫ Deepseek –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π {response.status_code}."
    except Exception as e:
        bot_stats["errors"] += 1
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Deepseek: {e}")
        return "–ö–æ—Ä–æ—á–µ, –≤–æ –º–Ω–µ –∫–∞–∫–∞—è-—Ç–æ –¥–∏—á—å —Å–ª–æ–º–∞–ª–∞—Å—å."

async def query_or_message(update, text, **kwargs):
    if update.callback_query:
        await update.callback_query.edit_message_text(text, **kwargs)
    else:
        await update.message.reply_text(text, **kwargs)

def generate_main_admin_keyboard() -> InlineKeyboardMarkup:
    status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω" if BOT_IS_ACTIVE else "üö´ –í—ã–∫–ª—é—á–µ–Ω"
    keyboard = [
        [InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∞–º–∏", callback_data='menu_admins')],
        [InlineKeyboardButton("üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è–º–∏", callback_data='menu_style')],
        [
            InlineKeyboardButton(f"üö¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status_text}", callback_data='toggle_bot_status'),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='show_stats')
        ],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='close_panel')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def render_styles_list(query):
    keyboard = []
    if not STYLES:
        keyboard.append([InlineKeyboardButton("–°—Ç–∏–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!", callback_data='add_style_start')])
    else:
        for key in STYLES:
            button_text = f"üëâ {key}" if key == CURRENT_STYLE_KEY else key
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'manage_style_{key}')])
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu_style')])
    await query.edit_message_text(
        text=md2("üé® –°—Ç–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def show_style_menu(update, context):
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π", callback_data='list_styles')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª—å", callback_data='add_style_start')],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='open_admin_panel')]
    ]
    await query_or_message(update, md2("üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è–º–∏"), reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

async def show_admin_menu(update, context):
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data='list_admins')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='add_admin_start')],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='open_admin_panel')]
    ]
    await query_or_message(update, md2("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"), reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

async def add_style_start(update, context):
    await query_or_message(
        update,
        md2("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: `my_style`):"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_STYLE_NAME

async def get_style_name(update, context):
    style_key = update.message.text.strip()
    if not re.match(r'^[a-zA-Z0-9_]+$', style_key):
        await update.message.reply_text(md2("‚ùó –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ _. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel."), parse_mode=ParseMode.MARKDOWN_V2)
        return GET_STYLE_NAME
    if style_key in STYLES:
        await update.message.reply_text(md2("‚ùó –¢–∞–∫–æ–π —Å—Ç–∏–ª—å —É–∂–µ –µ—Å—Ç—å. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel."), parse_mode=ParseMode.MARKDOWN_V2)
        return GET_STYLE_NAME
    context.user_data['new_style_key'] = style_key
    await update.message.reply_text(
        md2("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è:"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_STYLE_PROMPT

async def get_style_prompt(update, context):
    style_key = context.user_data['new_style_key']
    STYLES[style_key] = update.message.text
    save_styles()
    await update.message.reply_text(
        md2(f"‚úÖ –°—Ç–∏–ª—å `{style_key}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await show_style_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def edit_style_start(update, context):
    style_key = context.user_data['edit_style_key']
    await query_or_message(
        update,
        md2(f"‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∏–ª—è `{style_key}`:"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_EDIT_PROMPT

async def get_edit_prompt(update, context):
    style_key = context.user_data['edit_style_key']
    STYLES[style_key] = update.message.text
    save_styles()
    await update.message.reply_text(
        md2(f"‚úÖ –°—Ç–∏–ª—å `{style_key}` —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await show_style_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def edit_style_entry(update, context):
    key = update.callback_query.data.replace('edit_style_', '')
    if key not in STYLES:
        await update.callback_query.answer("–°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return ConversationHandler.END
    context.user_data['edit_style_key'] = key
    return await edit_style_start(update, context)

async def add_admin_start(update, context):
    await query_or_message(
        update,
        md2("üë§ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_ADMIN_FORWARD

async def get_admin_from_forward(update, context):
    origin = update.message.forward_origin
    if not origin or origin.type != 'user':
        await update.message.reply_text(
            md2("‚ùó –≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.\n\n(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–æ–∏—Ç –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É)."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return GET_ADMIN_FORWARD
    new_admin = origin.sender_user
    new_admin_id = new_admin.id
    new_admin_username = new_admin.username or f"user_{new_admin_id}"
    if new_admin_id in ADMINS:
        await update.message.reply_text(md2(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} —É–∂–µ –∞–¥–º–∏–Ω."), parse_mode=ParseMode.MARKDOWN_V2)
    else:
        ADMINS[new_admin_id] = new_admin_username
        save_admins()
        await update.message.reply_text(md2(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º."), parse_mode=ParseMode.MARKDOWN_V2)
    await show_admin_menu(update, context)
    return ConversationHandler.END

async def incorrect_admin_input(update, context):
    await update.message.reply_text(md2("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ü–ï–†–ï–®–õ–ò–¢–ï –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel."), parse_mode=ParseMode.MARKDOWN_V2)
    return GET_ADMIN_FORWARD

async def cancel_conversation(update, context):
    context.user_data.clear()
    await update.message.reply_text(md2("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."), parse_mode=ParseMode.MARKDOWN_V2)
    await admin_panel_command(update, context)
    return ConversationHandler.END

async def start(update, context):
    user = update.effective_user
    if user.id == ADMIN_ID and (user.username and ADMINS.get(ADMIN_ID) != user.username):
        ADMINS[ADMIN_ID] = user.username
        save_admins()
    base_text = (
        "ü§ñ AI DeepSeek –ë–æ—Ç\n"
        "–í –ª–∏—á–∫–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å. –í –≥—Ä—É–ø–ø–µ ‚Äî —á–µ—Ä–µ–∑ '–î–∏–ø, [—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å]'.\n\n"
        "‚ÑπÔ∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ–± –ò–ò, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /fact."
    )
    if user.id in ADMINS:
        keyboard = [[InlineKeyboardButton("üëë –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='open_admin_panel')]]
        await update.message.reply_text(f"{base_text}\n\n–î–ª—è —Ç–µ–±—è, –±–æ—Å—Å, —Å–ø–µ—Ü-–∫–Ω–æ–ø–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(base_text)

async def admin_panel_command(update, context):
    if update.effective_user.id not in ADMINS:
        await update.message.reply_text(md2("‚ùó –≠, —Ç—ã –Ω–µ –∞–¥–º–∏–Ω, –Ω–µ –ª–µ–∑—å."), parse_mode=ParseMode.MARKDOWN_V2)
        return
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=generate_main_admin_keyboard())

async def ai_fact_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîé –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç...")
    prompt = (
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ–¥–∏–Ω –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. "
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 5-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
    )
    fact = get_model_response(prompt, system_prompt_override="–¢—ã ‚Äî —ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—Ä–∏–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.")
    await update.message.reply_text(fact)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    global CURRENT_STYLE_KEY, BOT_IS_ACTIVE

    if data == 'open_admin_panel':
        await query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=generate_main_admin_keyboard())
    elif data == 'toggle_bot_status':
        BOT_IS_ACTIVE = not BOT_IS_ACTIVE
        status_message = "‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω." if BOT_IS_ACTIVE else "üö´ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω."
        await query.answer(status_message, show_alert=True)
        await query.edit_message_reply_markup(reply_markup=generate_main_admin_keyboard())
    elif data == 'menu_style':
        await show_style_menu(update, context)
    elif data == 'menu_admins':
        await show_admin_menu(update, context)
    elif data == 'list_styles':
        await render_styles_list(query)
    elif data.startswith('manage_style_'):
        key = data.replace('manage_style_', '')
        if key not in STYLES:
            await query.answer("–°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        escaped_key = md2(key)
        prompt_block = STYLES[key]
        text = f"üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–º `{escaped_key}`\n\n```\n{prompt_block}\n```"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∏–ª—å", callback_data=f'set_style_{key}')],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data=f'edit_style_{key}')],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª—å", callback_data=f'delete_style_{key}')],
            [InlineKeyboardButton("¬´ –ö —Å–ø–∏—Å–∫—É", callback_data='list_styles')]
        ]
        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
    elif data.startswith('set_style_'):
        CURRENT_STYLE_KEY = data.replace('set_style_', '')
        await query.answer(f"–°—Ç–∏–ª—å '{CURRENT_STYLE_KEY}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await render_styles_list(query)
    elif data.startswith('delete_style_'):
        key_to_delete = data.replace('delete_style_', '')
        keyboard = [
            [
                InlineKeyboardButton(f"–î–ê, –£–î–ê–õ–ò–¢–¨ '{key_to_delete}'", callback_data=f'confirm_delete_{key_to_delete}'),
                InlineKeyboardButton("–ù–ï–¢, –û–¢–ú–ï–ù–ê", callback_data='list_styles')
            ]
        ]
        await query.edit_message_text(
            text=md2(f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª—å `{key_to_delete}`?"),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    elif data.startswith('confirm_delete_'):
        key_to_delete = data.replace('confirm_delete_', '')
        if key_to_delete in STYLES:
            del STYLES[key_to_delete]
            save_styles()
        if CURRENT_STYLE_KEY == key_to_delete:
            CURRENT_STYLE_KEY = next(iter(STYLES)) if STYLES else None
        await query.answer("–°—Ç–∏–ª—å —É–¥–∞–ª–µ–Ω.")
        await render_styles_list(query)
    elif data == 'list_admins':
        lines = ["üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"]
        for admin_id, username in ADMINS.items():
            name = md2(username)
            crown = md2(" (–≥–ª–∞–≤–Ω—ã–π)") if admin_id == ADMIN_ID else ""
            lines.append(f"\\- @{name}{crown}\n")
        text = "".join(lines)
        keyboard = [
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='delete_admin_list')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu_admins')]
        ]
        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
    elif data == 'delete_admin_list':
        keyboard = []
        for admin_id, username in ADMINS.items():
            if admin_id != ADMIN_ID:
                keyboard.append([InlineKeyboardButton(f"üóëÔ∏è @{username}", callback_data=f'delete_admin_{admin_id}')])
        if len(keyboard) == 0:
            keyboard.append([InlineKeyboardButton("–ö—Ä–æ–º–µ –≤–∞—Å, –∞–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç", callback_data='no_op')])
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='list_admins')])
        await query.edit_message_text(md2("üë§ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:"), reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
    elif data.startswith('delete_admin_'):
        admin_id_to_delete = int(data.replace('delete_admin_', ''))
        username = ADMINS.pop(admin_id_to_delete, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        save_admins()
        await query.answer(f"–ê–¥–º–∏–Ω @{username} —É–¥–∞–ª–µ–Ω.", show_alert=True)
        lines = ["üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"]
        for admin_id, uname in ADMINS.items():
            name = md2(uname)
            crown = md2(" (–≥–ª–∞–≤–Ω—ã–π)") if admin_id == ADMIN_ID else ""
            lines.append(f"\\- @{name}{crown}\n")
        text = "".join(lines)
        keyboard = [
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='delete_admin_list')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu_admins')]
        ]
        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
    elif data == 'show_stats':
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n"
            f"- –ó–∞–ø—Ä–æ—Å–æ–≤: {bot_stats['requests']}\n"
            f"- –û—à–∏–±–æ–∫ API: {bot_stats['errors']}"
        )
        stats_text = stats_text.replace("-", "\\-")
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='open_admin_panel')]]
        await query.edit_message_text(text=stats_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
    elif data == 'close_panel':
        await query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
    elif data == 'no_op':
        await query.answer()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return
    if context.user_data and context.user_data.get('in_conversation'):
        return
    if not BOT_IS_ACTIVE:
        return
    if not update.message.from_user.is_bot:
        chat_histories[update.message.chat.id].append(f"{update.message.from_user.first_name}: {update.message.text.strip()}")
    question = None
    if update.message.chat.type == 'private':
        question = update.message.text.strip()
    elif update.message.chat.type in ['group', 'supergroup'] and re.match(r'^–î–∏–ø,', update.message.text.strip(), re.IGNORECASE):
        question = update.message.text.strip().split(',', 1)[1].strip()
    if question:
        if not CURRENT_STYLE_KEY:
            await update.message.reply_text(md2("‚ùó –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–∏–ª—è. –ê–¥–º–∏–Ω, –¥–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /admin."), parse_mode=ParseMode.MARKDOWN_V2)
            return
        await update.message.reply_text(md2("‚è≥ –î—É–º–∞—é..."), parse_mode=ParseMode.MARKDOWN_V2)
        response_text = get_model_response(question)
        await update.message.reply_text(md2(response_text), parse_mode=ParseMode.MARKDOWN_V2)

def main() -> None:
    load_data()
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    style_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(add_style_start, pattern='^add_style_start$'),
            CallbackQueryHandler(edit_style_entry, pattern=r'^edit_style_.+')
        ],
        states={
            GET_STYLE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_style_name)],
            GET_STYLE_PROMPT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_style_prompt)],
            GET_EDIT_PROMPT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_edit_prompt)],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
        per_user=True, per_chat=True
    )
    admin_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_admin_start, pattern='^add_admin_start$')],
        states={
            GET_ADMIN_FORWARD: [
                MessageHandler(filters.FORWARDED, get_admin_from_forward),
                MessageHandler(filters.TEXT & ~filters.COMMAND, incorrect_admin_input)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
        per_user=True, per_chat=True
    )
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel_command))
    application.add_handler(CommandHandler("fact", ai_fact_command))
    application.add_handler(admin_conv_handler)
    application.add_handler(style_conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –Ω–∞ –¥–≤–∏–∂–∫–µ Deepseek. –ó–∞–≤–µ–ª—Å—è, —ë–ø—Ç...")

    # === –î–û–ë–ê–í–õ–ï–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===
    threading.Thread(target=run_web, daemon=True).start()

    application.run_polling()

# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Flask-—Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ –µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤, –Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞) ===
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running"

def run_web():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

if __name__ == '__main__':
    main()
